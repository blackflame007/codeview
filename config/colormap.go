package config

import "github.com/fatih/color"

var ColorMap = map[string]*color.Color{
	"keyword":                           color.New(color.FgMagenta),
	"function":                          color.New(color.FgCyan),
	"type":                              color.New(color.FgGreen),
	"number":                            color.New(color.FgYellow),
	"string":                            color.New(color.FgRed),
	"comment":                           color.New(color.FgHiBlack),
	"variable":                          color.New(color.FgWhite),
	"package":                           color.New(color.FgHiCyan),
	"import":                            color.New(color.FgHiMagenta),
	"function.call":                     color.New(color.FgHiGreen),
	"method.call":                       color.New(color.FgHiGreen),
	"type.builtin":                      color.New(color.FgHiYellow),
	"operator":                          color.New(color.FgHiWhite),
	"escape.character":                  color.New(color.FgHiRed),
	"parameter":                         color.New(color.FgHiBlue),
	"field":                             color.New(color.FgHiCyan),
	"method":                            color.New(color.FgHiGreen),
	"constant":                          color.New(color.FgHiMagenta),
	"label":                             color.New(color.FgHiYellow),
	"error":                             color.New(color.FgHiRed),
	"warning":                           color.New(color.FgHiYellow),
	"info":                              color.New(color.FgHiCyan),
	"debug":                             color.New(color.FgHiWhite),
	"source_file":                       color.New(color.FgHiWhite),
	"package_clause":                    color.New(color.FgHiCyan),
	"package_identifier":                color.New(color.FgHiWhite),
	"import_declaration":                color.New(color.FgHiMagenta),
	"import_spec_list":                  color.New(color.FgHiMagenta),
	"import_spec":                       color.New(color.FgHiMagenta),
	"interpreted_string_literal":        color.New(color.FgYellow),
	"var_declaration":                   color.New(color.FgHiYellow),
	"var_spec":                          color.New(color.FgHiYellow),
	"composite_literal":                 color.New(color.FgHiYellow),
	"composite_literal.type_identifier": color.New(color.FgHiCyan),
	"type_identifier":                   color.New(color.FgHiCyan),
	"map_type":                          color.New(color.FgHiYellow),
	"map":                               color.New(color.FgHiMagenta),
	"pointer_type":                      color.New(color.FgHiYellow),
	"qualified_type":                    color.New(color.FgHiYellow),
	"literal_value":                     color.New(color.FgHiYellow),
	"keyed_element":                     color.New(color.FgHiYellow),
	"literal_element":                   color.New(color.FgHiYellow),
	"function_declaration":              color.New(color.FgHiGreen),
	"parameter_list":                    color.New(color.FgHiBlue),
	"block":                             color.New(color.FgHiWhite),
	"if_statement":                      color.New(color.FgHiYellow),
	"binary_expression":                 color.New(color.FgHiYellow),
	"short_var_declaration":             color.New(color.FgHiYellow),
	":=":                                color.New(color.FgHiMagenta),
	"var":                               color.New(color.FgHiMagenta),
	"expression_list":                   color.New(color.FgHiYellow),
	"index_expression":                  color.New(color.FgHiYellow),
	"unary_expression":                  color.New(color.FgHiYellow),
	"parameter_declaration":             color.New(color.FgHiWhite),
	"slice_type":                        color.New(color.FgHiYellow),
	"slice_expression":                  color.New(color.FgHiYellow),
	"escape_sequence":                   color.New(color.FgRed),
	"for":                               color.New(color.FgHiMagenta),
	"if":                                color.New(color.FgHiMagenta),
	"else":                              color.New(color.FgHiMagenta),
	"for_clause":                        color.New(color.FgHiYellow),
	"inc_statement":                     color.New(color.FgHiYellow),
	"func":                              color.New(color.FgHiMagenta),
	"identifier":                        color.New(color.FgHiWhite),
	"return_statement":                  color.New(color.FgHiMagenta),
	"call_expression":                   color.New(color.FgHiYellow),
	"selector_expression":               color.New(color.FgHiYellow),
	"field_identifier":                  color.New(color.FgHiYellow),
	"argument_list":                     color.New(color.FgHiYellow),
	"function_declaration.identifier":   color.New(color.FgHiGreen),
	"call_expression.identifier":        color.New(color.FgHiCyan),
	"selector_expression.identifier":    color.New(color.FgHiCyan),
	"int_literal":                       color.New(color.FgBlue),
	"nil":                               color.New(color.FgBlue),
	"(":                                 color.New(color.FgHiGreen),
	")":                                 color.New(color.FgHiGreen),
	"{":                                 color.New(color.FgHiMagenta),
	"}":                                 color.New(color.FgHiMagenta),
	"[":                                 color.New(color.FgHiMagenta),
	"]":                                 color.New(color.FgHiMagenta),
	"<":                                 color.New(color.FgHiMagenta),
	">":                                 color.New(color.FgHiMagenta),
	"=":                                 color.New(color.FgHiMagenta),
	"==":                                color.New(color.FgHiMagenta),
	"!=":                                color.New(color.FgHiMagenta),
	"!":                                 color.New(color.FgHiMagenta),
	"+":                                 color.New(color.FgHiMagenta),
	"++":                                color.New(color.FgHiMagenta),
	"-":                                 color.New(color.FgHiMagenta),
	".":                                 color.New(color.FgWhite),
	",":                                 color.New(color.FgWhite),
	";":                                 color.New(color.FgWhite),
	":":                                 color.New(color.FgWhite),
	"\"":                                color.New(color.FgHiYellow),
	"*":                                 color.New(color.FgHiMagenta),
	"return":                            color.New(color.FgHiMagenta),
	"var_spec.type_identifier":          color.New(color.FgHiCyan),
	"var_spec.identifier":               color.New(color.FgHiWhite),

	// ... add more as needed
}
